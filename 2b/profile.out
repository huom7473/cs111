Total: 100 samples
      92  92.0%  92.0%      100 100.0% thread_list_s
       8   8.0% 100.0%        8   8.0% __nss_database_lookup@GLIBC_2.2.5
       0   0.0% 100.0%        6   6.0% SortedList_insert
       0   0.0% 100.0%        2   2.0% SortedList_lookup
       0   0.0% 100.0%      100 100.0% clone
       0   0.0% 100.0%      100 100.0% start_thread
ROUTINE ====================== thread_list_s in /home/huom/Work/UCLA/fall2020/cs111/project2b/lab2_list.c
    92    100 Total samples (flat / cumulative)
     .      .   68:     }
     .      .   69:     pthread_exit(0);
     .      .   70: }
     .      .   71: 
     .      .   72: static int *spin_locks;
---
     .      .   73: void *thread_list_s(void *args) {
     .      .   74:     unsigned long long wait_time = 0;
     .      .   75:     struct timespec ts_start, ts_end; //for lock wait timing
     .      .   76:     int clock_errflag = 0; //or with return values, if any error it will be -1
     .      .   77: 
     .      .   78:     arg_t *data = (arg_t*)args;
     .      .   79:     int sublist; //sublist to add a particular node to
     .      .   80:     int length, total_length = 0; //sublist length target, total length
     .      .   81:     long long iterc = data->iters;
     .      .   82:     int listc = data->listc;
     .      .   83:     SortedListElement_t *node;
     .      .   84:     SortedListElement_t *my_nodepool = &(data->nodepool[data->threadnum * iterc]);
     .      .   85:     //know where to start for this thread
     .      .   86: 
     .      .   87:     for (int i = 0; i < iterc; ++i) { //insertions
     .      .   88:         sublist = my_nodepool[i].key[0] % listc; //modulo hash to determine sublist. use first character of key
     .      .   89:         clock_errflag |= clock_gettime(CLOCK, &ts_start);
    46     46   90:         while (__sync_lock_test_and_set(&spin_locks[sublist], 1))
     .      .   91:             ; //spin until lock is obtained
     .      .   92:         clock_errflag |= clock_gettime(CLOCK, &ts_end);
     .      6   93:         SortedList_insert(&data->lists[sublist], &my_nodepool[i]);
     .      .   94:         __sync_lock_release(&spin_locks[sublist]);
     .      .   95:         wait_time += (ts_end.tv_sec - ts_start.tv_sec) * 1000000000 + (ts_end.tv_nsec - ts_start.tv_nsec);
     .      .   96:     }
     .      .   97: 
     .      .   98:     for (int i = 0; i < listc; ++i) { //length checking - iterate through all lists
     .      .   99:         clock_errflag |= clock_gettime(CLOCK, &ts_start);
     .      .  100:         while (__sync_lock_test_and_set(&spin_locks[i], 1)); //spin until lock is obtained
     .      .  101:         clock_errflag |= clock_gettime(CLOCK, &ts_end);
     .      .  102:         length = SortedList_length(&data->lists[i]);
     .      .  103:         if (length == -1) {
     .      .  104:             fprintf(stderr, "thread %d: discovered list corruption while checking for length\n", data->threadnum);
     .      .  105:             pthread_exit((void *)-1);
     .      .  106:         }
     .      .  107:         __sync_lock_release(&spin_locks[i]);
     .      .  108:         total_length += length;
     .      .  109:         wait_time += (ts_end.tv_sec - ts_start.tv_sec) * 1000000000 + (ts_end.tv_nsec - ts_start.tv_nsec);
     .      .  110:     }
     .      .  111: 
     .      .  112:     if(total_length < iterc) {
     .      .  113:         fprintf(stderr,"thread %d: discovered list corruption while checking for length\n", data->threadnum);
     .      .  114:         pthread_exit((void*)-1);
     .      .  115:     }
     .      .  116: 
     .      .  117:     for (int i = 0; i < iterc; ++i) { //deletions
     .      .  118:         sublist = my_nodepool[i].key[0] % listc; //modulo hash to determine sublist. use first character of key
     .      .  119:         clock_errflag |= clock_gettime(CLOCK, &ts_start);
    46     46  120:         while (__sync_lock_test_and_set(&spin_locks[sublist], 1))
     .      .  121:             ; //spin until lock is obtained
     .      .  122:         clock_errflag |= clock_gettime(CLOCK, &ts_end);
     .      2  123:         node = SortedList_lookup(&data->lists[sublist], my_nodepool[i].key);
     .      .  124:         if(!node) {//we inserted this node, so we should be able to find it...
     .      .  125:             fprintf(stderr,"thread %d: couldn't find a node that was previously inserted\n", data->threadnum);
     .      .  126:             pthread_exit((void*)-1);
     .      .  127:         }
     .      .  128:         if(SortedList_delete(node)) {
     .      .  129:             fprintf(stderr, "thread %d: discovered list corruption while deleting node\n", data->threadnum);
     .      .  130:             pthread_exit((void*)-1);
     .      .  131:         }
     .      .  132:         __sync_lock_release(&spin_locks[sublist]);
     .      .  133:         wait_time += (ts_end.tv_sec - ts_start.tv_sec) * 1000000000 + (ts_end.tv_nsec - ts_start.tv_nsec);
     .      .  134:     }
     .      .  135: 
     .      .  136:     if (clock_errflag == -1) //some time get failed
     .      .  137:         pthread_exit((void*)-1);
     .      .  138: 
     .      .  139:     pthread_exit((void*)wait_time);
---
     .      .  140: }
     .      .  141: 
     .      .  142: static pthread_mutex_t *mutex_locks;
     .      .  143: void *thread_list_m(void *args) {
     .      .  144:     unsigned long long wait_time = 0;
